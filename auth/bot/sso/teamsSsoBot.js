// This file is auto generated by Teams Toolkit to provide you instructions and reference code to implement single sign on.
// This file implements a `TeamsActivityHandler` class using `ssoDialog` and add `showUserInfo` as a command.
// See https://docs.microsoft.com/javascript/api/botbuilder/teamsactivityhandler?view=botbuilder-ts-latest for more about `TeamsActivityHandler`.
// You can add your own command that requires SSO in this file.

const { ConversationState, MemoryStorage, TeamsActivityHandler, UserState } = require("botbuilder");
const { showUserInfo } = require("./showUserInfo");
const { SsoDialog } = require("./ssoDialog");

class TeamsSsoBot extends TeamsActivityHandler {
  constructor() {
    super();

    // Define the state store for your bot.
    // See https://aka.ms/about-bot-state to learn more about using MemoryStorage.
    // A bot requires a state storage system to persist the dialog and user state between messages.
    const memoryStorage = new MemoryStorage();

    // Create conversation and user state with in-memory storage provider.
    this.conversationState = new ConversationState(memoryStorage);
    this.userState = new UserState(memoryStorage);
    this.dialog = new SsoDialog(new MemoryStorage(), ["User.Read"]);
    this.dialogState = this.conversationState.createProperty("DialogState");

    // Add commands that requires user authentication
    this.dialog.addCommand("ShowUserProfile", "show", showUserInfo);
    // Call the `addCommand` function to add more customized commands with your own parameters, e.g.
    // this.dialog.addCommand("ManageToDo", new RegExp("todo\s*.*"), todoCmdHandler, param);

    this.onMessage(async (context, next) => {
      console.log("Running with Message Activity.");

      // Run the Dialog with the new message Activity.
      await this.dialog.run(context, this.dialogState);

      // By calling next() you ensure that the next BotHandler is run.
      await next();
    });
  }

  async run(context) {
    await super.run(context);

    // Save any state changes. The load happened during the execution of the Dialog.
    await this.conversationState.saveChanges(context, false);
    await this.userState.saveChanges(context, false);
  }

  async handleTeamsSigninVerifyState(context, query) {
    console.log("Running dialog with signin/verifystate from an Invoke Activity.");
    await this.dialog.run(context, this.dialogState);
  }

  async handleTeamsSigninTokenExchange(context, query) {
    await this.dialog.run(context, this.dialogState);
  }

  async onSignInInvoke(context) {
    await this.dialog.run(context, this.dialogState);
  }
}

exports.TeamsSsoBot = TeamsSsoBot;
